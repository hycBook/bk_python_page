# This is a basic workflow to help you get started with Actions

name: book python github

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build_env_hyc"
  build_env_hyc:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # install nodejs env
      - name: install nodejs
        uses: actions/setup-node@v1
        with: 
          node-version: '12.16.1'

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('book.json') }}
    

      - name: Cache GitBook
        uses: actions/cache@v2
        with:
          path: ~/.gitbook # 缓存路径
          key: ${{ runner.os }}-gitbook-${{ hashFiles('**/book.json') }}
          restore-keys: |
            ${{ runner.os }}-gitbook-

      - name: Install dependencies
        if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }} # 如果缓存不存在，则执行安装
        run: |
          echo 开始拉取nodejs插件
          git clone https://github.com/narutohyc/node_modules_mathjax.git
          cp -r ./node_modules_mathjax/node_modules .
          # 手动安装lightbox
          npm install  gitbook-plugin-lightbox
          npm install -g gitbook-cli
          gitbook install

      # configue gitbook
      - name: configue gitbook
        run: |
          rm -rf node_modules_mathjax
          git clone https://github.com/narutohyc/node_modules_mathjax.git
          npm install -g gitbook-cli
          # npm install -g gitbook-summary

      # - name: export pdf ebook
      #   run: |
      #     # 安装calibre，生成电子书
      #     echo 安装calibre...
      #     npm install svgexport -g
      #     sudo mkdir /usr/share/desktop-directories/
      #     sudo -v && wget -nv -O- https://download.calibre-ebook.com/linux-installer.sh | sudo sh /dev/stdin
      #     sudo ln -s /usr/bin/nodejs /usr/bin/node
      #     echo 安装calibre完成
      #     mkdir -p /usr/share/fonts/truetype
      #     cp -r ./node_modules_mathjax/fonts/* /usr/share/fonts/truetype

      # generate _book folder
      - name: generate_book_folder
        run: |
          gitbook build
          # echo 开始生成epub电子书...
          # gitbook epub ./ bk_python.epub
          # echo 生成epub电子书完成
          # mkdir _ebook
          # cp bk_python.epub _ebook/
          # echo epub电子书复制完成
          cp ./node_modules_mathjax/py_scripts/gen_sup_idx.py .
          pip install BeautifulSoup4
          pip install lxml
          python -u gen_sup_idx.py
          echo 生成辅助索引完成
          rm -rf _book/docs/*
          echo 删除多余格式文件完成
          cp ./node_modules_mathjax/styles/style.css _book/gitbook/style.css
          echo style.css文件替换完成
          # 更新计数器脚本
          cp ./chapters/res/patch/gitbook-plugin-pageview-count/plugin.js ./_book/gitbook/gitbook-plugin-pageview-count
          echo 更新计数器脚本完成
          echo 'loadlive2d("model_1", `https://cdn.jsdelivr.net/gh/zztongtong/moc-models@4.0/rem/model.json`, null);' >> _book/gitbook/gitbook.js
          echo 添加模型js脚本到gitbook.js完成
          cat chapters/res/patch/gitbook/gitbook.js > _book/gitbook/gitbook.js
          echo 添加鼠标点击js脚本完成
          cat chapters/res/patch/gitbook-plugin-fontsettings/fontsettings.js >> _book/gitbook/gitbook-plugin-fontsettings/fontsettings.js
          cat chapters/res/patch/gitbook-plugin-fontsettings/website.css >> _book/gitbook/gitbook-plugin-fontsettings/website.css
          cp chapters/res/patch/gitbook-plugin-theme-comscore/test.css _book/gitbook/gitbook-plugin-theme-comscore/test.css
          echo 更新自定义主题完成


      - name: Deploy #步骤4：把编译好的静态目录上传到gh-pages分支上
        uses: JamesIves/github-pages-deploy-action@3.1.5 #这里调用第三方依赖，用于上传代码到指定分支上
        with:
          ACCESS_TOKEN: ${{ secrets.TOKEN }}
          BRANCH: gh-pages #github pages 默认的分支
          FOLDER: _book #上传文件的目录，我这个目录在根目录下，如果是子目录可以这么写  docs/.vuepress/dist

      - name: Create GitHub release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.TOKEN }}
          automatic_release_tag: 'ebook_python'
          title: ${{ env.ReleaseVersion }}
          prerelease: false
          files: |
            _ebook/*

      # - name: Sync Github Repos To Gitee  # 名字随便起
      #   uses: Yikun/hub-mirror-action@master  # 使用Yikun/hub-mirror-action
      #   with:
      #     src: github/hycBook  # 源端账户名(github),如果是组织的话要用组织名,此时account_type=org
      #     dst: gitee/hycBook  # 目的端账户名(gitee),如果是组织的话要用组织名,此时account_type=org
      #     dst_key: ${{ secrets.GITEE_PRIVATE_KEY }}  # SSH密钥对中的私钥
      #     dst_token:  ${{ secrets.GITEE_TOKEN }}  # Gitee账户的私人令牌
      #     account_type: org  # 账户类型,
      #     # clone_style: "ssh"  # 使用https方式进行clone，也可以使用ssh
      #     debug: true  # 启用后会显示所有执行命令
      #     force_update: true  # 启用后，强制同步，即强制覆盖目的端仓库
      #     static_list: "bk_python"  # 静态同步列表，在此填写需要同步的仓库名称，可填写多个
      #     timeout: '660s'  # git超时设置，超时后会自动重试git操作

      # - name: Build Gitee Pages
      #   uses: yanglbme/gitee-pages-action@main
      #   with:
      #     # 注意替换为你的 Gitee 用户名
      #     gitee-username: narutohyc
      #     # 注意在 Settings->Secrets 配置 GITEE_PASSWORD
      #     gitee-password: ${{ secrets.GITEE_PASSWORD }}
      #     # 注意替换为你的 Gitee 仓库，仓库名严格区分大小写，请准确填写，否则会出错
      #     gitee-repo: hycBook/bk_python
      #     # 要部署的分支，默认是 master，若是其他分支，则需要指定（指定的分支必须存在）
      #     branch: gh-pages

      # Runs a single command using the runners shell
      - name: print_infos
        run: echo build sucessful!
  
      # https://www.houzhenni.com/blog/nuxt-blog-generate-files-n-push-to-another-repo
      - name: Publish
        uses: cpina/github-action-push-to-another-repository@v1.3
        env:
          API_TOKEN_GITHUB: ${{ secrets.DEST_REPO_TOKEN }}
        with:
          source-directory: '_book'
          destination-github-username: 'hycBook'
          destination-repository-name: 'bk_python_page'
          user-email: 1832044043@qq.com
          target-branch: gh-pages